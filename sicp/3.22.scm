#lang planet neil/sicp

(define (make-queue)
 (let ((front-ptr '())
       (rear-ptr '()))
   (define (empty?)
     (null? front-ptr))
   (define (front)
     (if (empty?)
         (error "FRONT called on an empty queue")
         (car front-ptr)))
   (define (insert item)
     (let ((new-pair (cons item '())))
       (cond ((empty?) (set! front-ptr new-pair))
             (else (set-cdr! rear-ptr new-pair)))
       (set! rear-ptr new-pair)))
   (define (delete)
     (cond ((empty?) (error "DELETE! called with an empty queue"))
           (else (set! front-ptr (cdr front-ptr)))))
   (define (print)
     (define (iter element seperator)
       (cond ((not (null? element))
              (display seperator)
              (display (car element))
              (iter (cdr element) " "))))
     (display "(")
     (cond ((not (empty?))
            (iter front-ptr "")))
     (display ")")
     (newline))
   (define (dispatch m) 
     (cond ((eq? m 'empty?) empty?)
           ((eq? m 'front) front)
           ((eq? m 'insert) insert)
           ((eq? m 'delete) delete)
           ((eq? m 'print) print)
           (else (error "Unknown request -- queue" m))))
   dispatch))

(define q1 (make-queue))
((q1 'empty?))
((q1 'print))
((q1 'insert) 'a)
((q1 'empty?))
((q1 'print))
((q1 'front))
((q1 'insert) 'b)
((q1 'empty?))
((q1 'print))
((q1 'front))
((q1 'delete))
((q1 'empty?))
((q1 'print))
((q1 'front))
((q1 'delete))
((q1 'empty?))
((q1 'print))


