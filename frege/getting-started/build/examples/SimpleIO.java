/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ »  ﬁ ﬂ ƒ
  If you can't read this, you're out of luck.
  This code was generated with the frege compiler version 3.22.524-gcc99d7e from SimpleIO.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/


package examples;

import frege.prelude.Maybe;
import frege.java.Lang;
import frege.control.Semigroupoid;
import frege.Prelude;
import frege.control.Category;
import frege.data.Monoid;
import frege.data.Char;
import frege.data.Bits;
import frege.data.List;
import frege.java.IO;
import frege.data.TreeMap;
import frege.java.Util;
import frege.java.util.Regex;
import frege.test.QuickCheckArbitrary;
import frege.prelude.PreludeList;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeText;
import frege.prelude.PreludeMonad;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckException;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckState;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@frege.runtime.Meta.FregePackage(
  source="SimpleIO.fr", time=1457198536592L, doc=" Demonstration of terminal input/output   ",
  ops={},
  imps={
    "frege.prelude.PreludeList", "frege.prelude.PreludeBase", "frege.Prelude",
    "frege.prelude.PreludeArrays", "frege.prelude.PreludeIO", "frege.prelude.PreludeText",
    "frege.prelude.PreludeMonad", "frege.java.util.Regex", "frege.test.QuickCheck"
  },
  nmss={
    "PreludeList", "PreludeBase", "Prelude", "PreludeArrays", "PreludeIO", "PreludeText",
    "PreludeMonad", "Regexp", "QuickCheck"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @frege.runtime.Meta.SymV(
      offset=272, name=@frege.runtime.Meta.QName(pack="examples.SimpleIO", base="main"),
      stri="s(u)", sig=1, depth=1, rkind=49,
      doc=" The 'main' function will be called by the runtime when you run the 'SimpleIO' class.   "
      +"\n"+ "" +"\n"+
      " It will get passed the list of command line arguments, but we ignore them here.   "
    ),
    @frege.runtime.Meta.SymV(
      offset=1033, name=@frege.runtime.Meta.QName(pack="examples.SimpleIO", base="p_test"),
      stri="u", sig=2, depth=0, rkind=36,
      doc=" " +"\n"+ "    The property 'p_test' checks the claim that" +"\n"+
      "    every integral number must be either odd or even." +"\n"+ "     "
    )
  },
  symls={},
  taus={
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=1, subb=2),
    @frege.runtime.Meta.Tau(kind=0, suba=0, subb=3),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={
        @frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")
      }
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=5, subb=6),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=7, subb=8),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.test.QuickCheckGen", base="Gen")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={
        @frege.runtime.Meta.QName(kind=0, pack="frege.test.QuickCheckProperty", base="Prop")
      }
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=10, subb=11)
  },
  rhos={
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=4),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=9), @frege.runtime.Meta.Rho(sigma=0, rhotau=1),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=12)
  },
  sigmas={
    @frege.runtime.Meta.Sigma(rho=0), @frege.runtime.Meta.Sigma(rho=2),
    @frege.runtime.Meta.Sigma(rho=3)
  },
  exprs={@frege.runtime.Meta.Expr()}, kinds={@frege.runtime.Meta.Kind(kind=0)}
)

final public class SimpleIO  {
  

final public static Ĳ ĳ = new Ĳ();
final public static frege.runtime.Lazy p_test = 
  new frege.runtime.Delayed() {
    final public frege.runtime.Lazy eval() {
      return frege.runtime.Delayed.<frege.runtime.Lambda>forced(
                PreludeBase.$(
                      QuickCheckProperty.Ĳ.propertyƒ2ab89a88.inst(
                            QuickCheckArbitrary.IArbitrary_Integer.it,
                            PreludeText.IShow_Integer.it, QuickCheckProperty.ITestable_Bool.it
                          ),
                      new frege.runtime.Fun1<java.lang.Boolean>() {
                        final public java.lang.Boolean eval(final java.lang.Object arg$1) {
                          return PreludeBase._caret_caret(
                                    PreludeBase.IIntegral_Integer.odd(
                                          frege.runtime.Delayed.<java.math.BigInteger>forced(
                                                arg$1
                                              )
                                        ),
                                    PreludeBase.IIntegral_Integer.even(
                                          frege.runtime.Delayed.<java.math.BigInteger>forced(
                                                arg$1
                                              )
                                        )
                                  );
                        }
                      }
                    )
              );
    }
  }
;
final public static frege.runtime.Lambda eof(final java.lang.Object arg$1) {
  return Prelude.print(PreludeText.IShow_String.it, "Good bye. ");
}
final public static frege.runtime.Lambda _main(final frege.runtime.Lazy arg$1) {
  final class Fprompt_30701 extends frege.runtime.Fun1<frege.runtime.Lambda>  {
    final public frege.runtime.Lambda work(final java.lang.String arg$2) {
      final Fprompt_30701 this30701 = this;
      return PreludeMonad.IMonad_ST._gt_gt(
                IO.TPrintWriter.print(frege.runtime.Runtime.stdout.get(), arg$2),
                new frege.runtime.Delayed() {
                  final public frege.runtime.Lazy eval() {
                    return PreludeMonad.IMonad_ST._gt_gt(
                              IO.TFlushable.flush(frege.runtime.Runtime.stdout.get()),
                              Prelude.getLine
                            );
                  }
                }
              );
    }
    final public frege.runtime.Lambda eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.<java.lang.String>forced(arg$1));
    }
  }
  final Fprompt_30701 prompt_30701 = new Fprompt_30701();
  return PreludeIO._finally(
            PreludeIO._catch(
                  IO.IExceptional_EOFException.it,
                  (frege.runtime.Lambda)PreludeMonad.forever(
                        PreludeMonad.IMonad_ST.it,
                        new frege.runtime.Delayed() {
                          final public java.lang.Object eval() {
                            return PreludeBase.TST._gt_gt_eq(
                                      prompt_30701.work("Enter integer number: "),
                                      new frege.runtime.Fun1<frege.runtime.Lambda>() {
                                        final public frege.runtime.Lambda eval(
                                          final java.lang.Object arg$2
                                        ) {
                                          final java.lang.String reply_30703 = 
                                            frege.runtime.Delayed.<java.lang.String>forced(
                                                  arg$2
                                                )
                                          ;
                                          final PreludeBase.TEither $30328 = 
                                            PreludeBase.TStringJ.integer(reply_30703)
                                          ;
                                          final PreludeBase.TEither.DLeft $30327 = 
                                            $30328._Left()
                                          ;
                                          if ($30327 != null) {
                                            return Prelude.println(
                                                      PreludeText.IShow_String.it,
                                                      PreludeBase.TStringJ._plus_plus(
                                                            "`",
                                                            PreludeBase.TStringJ._plus_plus(
                                                                  reply_30703,
                                                                  "` is not an integer."
                                                                )
                                                          )
                                                    );
                                          }
                                          final PreludeBase.TEither.DRight $30322 = 
                                            $30328._Right()
                                          ;
                                          assert $30322 != null;
                                          final java.math.BigInteger n_30697 = 
                                            frege.runtime.Delayed.<java.math.BigInteger>forced(
                                                  $30322.mem1
                                                )
                                          ;
                                          return Prelude.println(
                                                    PreludeText.IShow_String.it,
                                                    PreludeBase.TStringJ._plus_plus(
                                                          n_30697.toString(),
                                                          PreludeBase.TStringJ._plus_plus(
                                                                " is ",
                                                                PreludeBase.TStringJ._plus_plus(
                                                                      PreludeBase.IIntegral_Integer.even(n_30697) ? "even" : "odd",
                                                                      "."
                                                                    )
                                                              )
                                                        )
                                                  );
                                        }
                                      }
                                    );
                          }
                        }
                      ),
                  Ĳ.eofƒ5207be3f.inst
                ),
            Prelude.println(PreludeText.IShow_String.it, "See you again.")
          );
}
@frege.runtime.Meta.FunctionPointers(
  qnames={@frege.runtime.Meta.QName(pack="examples.SimpleIO", base="main")},
  jnames={"_mainƒ52393afc"}
)
public static class Ĳ  {
  public Ĳ() {}
  final public static class eofƒ5207be3f extends frege.runtime.Fun1<frege.runtime.Lambda>  {
    public eofƒ5207be3f() {}
    final public frege.runtime.Lambda eval(final java.lang.Object arg$1) {
      return SimpleIO.eof(arg$1);
    }
    final public static eofƒ5207be3f inst = new eofƒ5207be3f();
  }
  final public static class _mainƒ52393afc extends frege.runtime.Fun1<frege.runtime.Lambda>  {
    public _mainƒ52393afc() {}
    final public frege.runtime.Lambda eval(final java.lang.Object arg$1) {
      return SimpleIO._main(frege.runtime.Delayed.delayed(arg$1));
    }
    final public static _mainƒ52393afc inst = new _mainƒ52393afc();
  }
}
public static void main(final java.lang.String[] argv) {
  final long t1 = java.lang.System.nanoTime();
  java.lang.Integer xit = frege.runtime.Runtime.runMain(
    frege.prelude.PreludeBase.TST.performUnsafe(
      Ĳ._mainƒ52393afc.inst.apply(frege.prelude.PreludeBase._toList(argv)).<frege.runtime.Lambda>forced()));
  final long t2 = java.lang.System.nanoTime();
  frege.runtime.Runtime.stderr.get().println(
    "runtime " + ((((t2 - t1) + 500000) / 1000000) / 1e3) + " wallclock seconds.");
  if (xit != null) java.lang.System.exit(xit);
}
}
